from mage_ai.settings.repo import get_repo_path
from mage_ai.io.config import ConfigFileLoader
from mage_ai.io.google_cloud_storage import GoogleCloudStorage
from pandas import DataFrame
from os import path
import requests
import io
import pyarrow as pa
import pyarrow.parquet as pq
import pandas as pd

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


@data_exporter
def export_data_to_google_cloud_storage(**kwargs) -> None:

    config_path = path.join(get_repo_path(), 'io_config.yaml')
    config_profile = 'default'

    base_object_key = 'taxidata_'
    bucket_name = 'analytics-zoomcamp-barbara-atkins'
    extension =  ".csv.gz"
    taxi_sets = ["green", "yellow", "fhv"]
    years = ["2019", "2020"]
    months = ["01","02","03","04","05","06","07","08","09","10","11", "12"]
    base_file_url = "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/"

  #  https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2019-01.csv.gz
  #  https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2019-01.csv.gz
  #  https://github.com/DataTalksClub/nyc-tlc-data/releases/download/fhv/fhv_tripdata_2019-01.csv.gz

    for taxi_set in taxi_sets:
        for year in years:
            for month in months:
                taxi_data_url_by_month = base_file_url + taxi_set + "/" + taxi_set + "_tripdata_" + year + "-" + month + extension
               
                object_key = base_object_key + taxi_set + "_" + year + "_" + month + extension

                print(taxi_data_url_by_month)
                print(object_key)
                
                response = requests.get(taxi_data_url_by_month)
                data = io.BytesIO(response.content)
#                df = pq.read_csv(data).to_pandas()

                   # read it back into a parquet file
                df = pd.read_csv(file_name, compression='gzip')

                df['VendorID'] = pd.to_numeric(df['VendorID'])
                df['passenger_count']       = pd.to_numeric(df['passenger_count'])
                df['trip_distance']         = pd.to_numeric(df['trip_distance'])
                df['RatecodeID']            = pd.to_numeric(df['RatecodeID'])
                df['store_and_fwd_flag']    = df['store_and_fwd_flag'].astype(str)
                df['PULocationID']          = pd.to_numeric(df['PULocationID'])
                df['DOLocationID']          = pd.to_numeric(df['DOLocationID'])
                df['payment_type']          = pd.to_numeric(df['payment_type'])
                df['fare_amount']           = pd.to_numeric(df['fare_amount'])
                df['extra']                 = pd.to_numeric(df['extra'])
                df['mta_tax']               = pd.to_numeric(df['mta_tax'])
                df['tip_amount']            = pd.to_numeric(df['tip_amount'])
                df['tolls_amount']          = pd.to_numeric(df['tolls_amount'])
                df['improvement_surcharge'] = pd.to_numeric(df['improvement_surcharge'])
                df['total_amount']          = pd.to_numeric(df['total_amount'])
                df['congestion_surcharge']  = pd.to_numeric(df['congestion_surcharge'])
                df["ehail_fee"]             = pd.to_numeric(df["ehail_fee"])


                GoogleCloudStorage.with_config(
                    ConfigFileLoader(
                        config_path,
                        config_profile
                    )
                ).export(
                    df,
                    bucket_name,
                    object_key
                )
